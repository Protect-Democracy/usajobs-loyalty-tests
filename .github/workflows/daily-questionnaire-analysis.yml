name: Daily Questionnaire Analysis

on:
  # When our data files are updated and merged to main
  push:
    branches:
      - 'main'
    paths:
      - '**.parquet'
  workflow_dispatch:  # Allow manual trigger


# Needed for pushing changes back to repo and creating PRs
permissions:
  contents: write
  id-token: write
  pull-requests: write

jobs:
  analyze-questionnaires:
    runs-on: ubuntu-latest
    timeout-minutes: 180  # 3 hour timeout for questionnaire analysis
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        lfs: true  # Pull Git LFS files
        ref: main  # Always start from main

    - name: Create or switch to questionnaire-updates branch
      run: |
        # Fetch all branches
        git fetch origin
        
        # Always start from main for a clean state
        git checkout main
        git pull origin main
        
        # Create a fresh questionnaire-updates branch from main
        # This ensures we always have the latest code and data
        git checkout -B questionnaire-updates
        echo "Created fresh questionnaire-updates branch from main"
        
        git lfs pull
        echo "Verifying data files:"
        ls -lh data/*.parquet | head -5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
        # Install Playwright
        pip install playwright
        playwright install chromium
        playwright install-deps

    - name: Configure git
      run: |
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "actions@github.com"

    - name: Run questionnaire analysis
      timeout-minutes: 150  # 2.5 hour timeout
      env:
        GITHUB_ACTIONS: true
      run: |
        cd src
        python run_questionnaire_pipeline.py
      continue-on-error: true  # Don't fail the workflow if scraping times out

    - name: Run questionnaire tests
      id: questionnaire_tests
      run: |
        cd src
        python test_questionnaire_artifacts.py
        # If tests fail, this step will fail and stop the workflow

    - name: Commit and push to questionnaire-updates branch
      # Only commit if tests passed
      run: |
        # Check if there are changes
        if [ -n "$(git status --porcelain)" ]; then
          git add .
          git commit -m "Update questionnaire analysis - $(date +'%Y-%m-%d')"
          git push -f origin questionnaire-updates
          echo "CHANGES_MADE=true" >> $GITHUB_ENV
          echo "✅ Committed changes to questionnaire-updates branch"
        else
          echo "ℹ️  No changes to commit"
          echo "CHANGES_MADE=false" >> $GITHUB_ENV
        fi

    - name: Create Pull Request
      if: env.CHANGES_MADE == 'true'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Check if PR already exists
        PR_EXISTS=$(gh pr list --base main --head questionnaire-updates --state open --json number --jq length)
        
        if [ "$PR_EXISTS" -eq "0" ]; then
          echo "Creating new PR..."
          gh pr create \
            --base main \
            --head questionnaire-updates \
            --title "Questionnaire analysis update - $(date +'%Y-%m-%d')" \
            --body "Automated questionnaire analysis update"
        else
          echo "PR already exists, skipping creation"
        fi

    - name: Auto-merge PR if tests pass
      if: env.CHANGES_MADE == 'true' && steps.questionnaire_tests.outcome == 'success'
      run: |
        # Wait a moment for PR to be created
        sleep 10
        
        # Find the PR number
        PR_NUMBER=$(gh pr list --base main --head questionnaire-updates --json number --jq '.[0].number')
        
        if [ -n "$PR_NUMBER" ]; then
          echo "Auto-merging PR #$PR_NUMBER"
          gh pr merge $PR_NUMBER --merge --auto
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-to-prod:
    if: needs.analyze-questionnaires.result == 'success'
    needs: analyze-questionnaires
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        ref: main
    
    - name: Merge to main
      run: |
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "actions@github.com"
        
        git checkout main
        git pull origin main
        git merge questionnaire-updates --no-ff -m "Merge questionnaire-updates"
        git push origin main
        echo "✅ Merged to main branch"

    - name: Deploy to Netlify
      uses: jsmrcaga/action-netlify-deploy@v2.0.0
      with:
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_DEPLOY_MESSAGE: "Deployed from GitHub action"
        NETLIFY_DEPLOY_TO_PROD: true
        install_command: "echo Skipping installing the dependencies"
        build_command: "echo Skipping building the web files"
        build_directory: "src/public"
